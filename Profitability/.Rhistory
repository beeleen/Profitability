summarise(group_by(products2017Num, Price), (n = n_distinct()))
arrange(desc(summarise(group_by(products2017Num, Price), (n = n())), n))
priceNums <-  summarise(group_by(products2017Num, Price), (n = n()))
arrange(desc(priceNums, n))
priceNums <-  summarise(group_by(products2017Num, Price), (n = n()))
summarise(group_by(products2017Num, Price), (n = n()))
arrange(desc(products2017Num, summarise(group_by(products2017Num, Price), (n = n()))))
summarise(group_by(products2017Num, Price), (n = n()))
View(priceNums)
summary(products2017Num)
str(products2017Num)
x4StarNums <- products2017Num %>% group_by(x4StarReviews) %>% summarise (n = n())
View(x4StarNums)
PositiveNums <- products2017Num %>% group_by(PositiveServiceReview) %>% summarise (n = n())
View(PositiveNums)
products2017Num %>% filter(PositiveServiceReview == '280')
positiveOutliers <- products2017Num %>% filter(PositiveServiceReview == '280')
positiveServiceOutliers <- products2017Num %>% filter(PositiveServiceReview == '280')
rm(positiveOutliers)
positiveServiceOutliers <- products2017Num %>% filter(PositiveServiceReview == '280')
View(positiveServiceOutliers)
View(positiveServiceOutliers)
View(positiveServiceOutliers)
View(positiveServiceOutliers)
pacman:: p_load(caret, reshape, ggplot2, dplyr)x <- runif(50, min = 0, max = 100) # generate 50 random number from 0 to 100
pacman:: p_load(caret, reshape, ggplot2, dplyr)
x <- runif(50, min = 0, max = 100) # generate 50 random number from 0 to 100
z <- runif(50, min = 0, max = 100)
a <- runif(50, min = 0, max = 100)
b <- runif(50, min = 0, max = 100)
y <- runif(50, min = 0, max = 100)df <- as.data.frame(cbind(x,z,a,b,y))
y <- runif(50, min = 0, max = 100)
df <- as.data.frame(cbind(x,z,a,b,y))
set.seed(1307)
getModelInfo()
intrain <- createDataPartition(df$y, 0.7
train <- df[intrain, ]
test <-  df[-intrain, ]
intrain <- createDataPartition(df$y, 0.7
train <- df[intrain, ]
test <-  df[-intrain, ]
methodsXY <- c("knn", "rf","gbm" )
#metricXY <- c("")
models <- train(y ~ .,data = df,method = knn)
intrain <- createDataPartition(df$y, 0.7)
train <- df[intrain, ]
test <-  df[-intrain, ]
methodsXY <- c("knn", "rf","gbm" )
models <- train(y ~ .,data = df,method = knn)
models <- train(y ~ .,data = df,method = "knn")
models
for (i in 1:length(methodsXY)) {
models <- train(y ~ .,data = df,method = methodsXY[i])
}
models
predictions <- predict(models, newdata = test)
models <- train(y ~ .,data = df,method = methodsXY[i])
predictions <- predict(models, newdata = test)
predictions <- predict(models, test)
models <- train(y ~ .,data = df,method = methodsXY[i])
predictions <- predict(models, newdata = test)
models <- train(y ~ .,data = df,method = "knn")
predictions <- predict(models, newdata = test)
test <-  df[-intrain, ]
train <- df[intrain, ]
intrain <- createDataPartition(df$y, 0.7, list = FALSE)
x <- runif(50, min = 0, max = 100) # generate 50 random number from 0 to 100
z <- runif(50, min = 0, max = 100)
a <- runif(50, min = 0, max = 100)
b <- runif(50, min = 0, max = 100)
y <- runif(50, min = 0, max = 100)
df <- as.data.frame(cbind(x,z,a,b,y))
intrain <- createDataPartition(df$y, 0.7, list = FALSE)
intrain <- createDataPartition(y = df$y, 0.7, list = FALSE)
models <- train(y ~ .,data = df,method = "knn")
predictions <- predict(models, newdata = test)
test
pacman:: p_load(caret, reshape, ggplot2, dplyr)
x <- runif(50, min = 0, max = 100) # generate 50 random number from 0 to 100
z <- runif(50, min = 0, max = 100)
a <- runif(50, min = 0, max = 100)
b <- runif(50, min = 0, max = 100)
y <- runif(50, min = 0, max = 100)
df <- as.data.frame(cbind(x,z,a,b,y))
set.seed(1307)
intrain <- createDataPartition(df$y, 0.7)
train <- df[intrain, ]
pacman:: p_load(caret, reshape, ggplot2, dplyr)
x <- runif(50, min = 0, max = 100) # generate 50 random number from 0 to 100
z <- runif(50, min = 0, max = 100)
a <- runif(50, min = 0, max = 100)
b <- runif(50, min = 0, max = 100)
y <- runif(50, min = 0, max = 100)
df <- as.data.frame(cbind(x,z,a,b,y))
intrain <- createDataPartition(df$y, 0.7)
View(intrain)
train <- df[intrain, ]
intrain <- createDataPartition(df$y, 0.7, list = FALSE)
intrain <- createDataPartition(df$y, 0.7, list = FALSE)
models
intrain <- createDataPartition(df$y, 0.7)
train <- df[intrain, ]
intrain <- createDataPartition(df$y, p= 0.7)
train <- df[intrain, ]
intrain <- createDataPartition(df$y, p= 0.7)
train <- df[intrain, ]
intrain <- createDataPartition(y = df$y, p= 0.7)
train <- df[intrain, ]
train <- df[intrain, ]
intrain <- createDataPartition(y = df$y, p= 0.7)
train <- df[intrain, ]
intrain <- createDataPartition(y = df$y, p= 0.7, list = FALSE)
train <- df[intrain, ]
test <-  df[-intrain, ]
for (i in 1:length(methodsXY)) {
models <- train(y ~ .,data = df,method = methodsXY[i])
predictModels <-predict(models, test)
postModels <-  postResample(predictModels, test$y)
combined <- cbind(postModels, combined)
}
methodsXY <- c("knn", "rf","gbm" )
for (i in 1:length(methodsXY)) {
models <- train(y ~ .,data = df,method = methodsXY[i])
predictModels <-predict(models, test)
postModels <-  postResample(predictModels, test$y)
combined <- cbind(postModels, combined)
}
methodsXY <- c("lm", "knn", "rf","gbm" )
combined <- c()
for (i in 1:length(methodsXY)) {
models <- train(y ~ .,data = df,method = methodsXY[i])
predictModels <-predict(models, test)
postModels <-  postResample(predictModels, test$y)
combined <- cbind(postModels, combined)
}
combined
combined <- c(methodsXY)
combined
combined <- c()
for (i in 1:length(methodsXY)) {
models <- train(y ~ .,data = df,method = methodsXY[i])
predictModels <-predict(models, test)
postModels <-  postResample(predictModels, test$y)
combined <- cbind(postModels, combined)
}
combined[,1] <- c(methodsXY)
combined
View(combined)
cnames(combined) <- c(methodsXY)
colnames(combined) <- c(methodsXY)
combined
combined_melt <- melt(combined, varnames = c("metric", "model"))
combined_melt
ggplot(combined_melt, aes(metric,model )) + barplot()
ggplot(combined_melt, aes(model,metric )) +geom_bar()
ggplot(combined_melt, aes(metric,model )) + geom_bar()
ggplot(combined_melt, aes(metric,model )) + geom_density()
ggplot(combined_melt, aes(metric,model )) + geom_histogram()
ggplot(combined_melt, aes(metric,model )) + geom_density()
View(combined_melt)
gggrid <-  ggplot(combined_melt, aes(metric,model )) + geom_bar()
gggrid + facet_wrap(metric ~.)
View(combined_melt)
gggrid <-  ggplot(combined_melt, aes(metric,value)) + geom_bar()
gggrid + facet_wrap(model ~.)
gggrid <-  ggplot(combined_melt, aes(metric,value)) + geom_bar()
gggrid
combined_melt
gggrid <-  ggplot(combined_melt, aes(metric,value)) + geom_bar()
ggplot(combined_melt, aes(metric,value)) + geom_bar()
ggplot(combined_melt, aes(metric,value)) + geom_bar(stat="identity")
gggrid <-  ggplot(combined_melt, aes(metric,value)) + geom_bar(stat="identity")
gggrid + facet_wrap(model ~.)
gggrid <-  ggplot(combined_melt, aes(metric,value)) + geom_col
gggrid <-  ggplot(combined_melt, aes(metric,value)) + geom_col()
gggrid + facet_wrap(model ~.)
pacman:: p_load(caret, reshape, ggplot2, dplyr)
x <- runif(50, min = 0, max = 100) # generate 50 random number from 0 to 100
z <- runif(50, min = 0, max = 100)
a <- runif(50, min = 0, max = 100)
b <- runif(50, min = 0, max = 100)
y <- runif(50, min = 0, max = 100)
df <- as.data.frame(cbind(x,z,a,b,y))
pacman::p_load(ggplot2, dplyr)
products2017 <- read.csv("~/Documents/@/UBIQUM/DATAML/Week6/Profitability/Profitability/DATASETS/existingproductattributes2017.csv")
products2018 <- read.csv("~/Documents/@/UBIQUM/DATAML/Week6/Profitability/Profitability/DATASETS/existingproductattributesPast.csv")
products2017Num <- products2017[c(-1,-2)]
str(products2017Num)
# Visualize the data. First approach
for (col in 1:ncol(products2017Num)) {
hist(products2017Num[,col], main = names(products2017Num[col]), xlab=colnames(products2017Num[col]), border = "black", col = "#bcd4e6", breaks=50 )}
for (col in 1:ncol(products2017Num)) {
boxplot(products2017Num[,col], main = names(products2017Num[col]), xlab=colnames(products2017Num[col]), border = "black", col = "#bcd4e6" )}
#Find patterns in the data
# box_plot <- boxplot(products2017[, c("","")])
#sort(products2017Num$NegativeServiceReview)
priceNums <- products2017Num %>% group_by(Price) %>% summarise (n = n())
#the same but in different way >>> priceNums <-  summarise(group_by(products2017Num, Price), (n = n()))
x5StarNums <- products2017Num %>% group_by(x5StarReviews) %>% summarise (n = n())
x4StarNums <- products2017Num %>% group_by(x4StarReviews) %>% summarise (n = n())
PositiveNums <- products2017Num %>% group_by(PositiveServiceReview) %>% summarise (n = n())
positiveServiceOutliers <- products2017Num %>% filter(PositiveServiceReview == '280')
products2017
products2017Num <- products2017Num[-positiveServiceOutliers,]
priceNums
positiveServiceOutliers
positiveServiceOutliers <- products2017 %>% filter(PositiveServiceReview == '280')
products2017 <- products2017[-positiveServiceOutliers,]
positiveServiceOutliers
products2017 <- products2017[-c(135:141),]
products2017
products2017 <- read.csv("~/Documents/@/UBIQUM/DATAML/Week6/Profitability/Profitability/DATASETS/existingproductattributes2017.csv")
products2017Num <- products2017[c(-1,-2)]
#sort(products2017Num$NegativeServiceReview)
priceNums <- products2017Num %>% group_by(Price) %>% summarise (n = n())
#the same but in different way >>> priceNums <-  summarise(group_by(products2017Num, Price), (n = n()))
x5StarNums <- products2017Num %>% group_by(x5StarReviews) %>% summarise (n = n())
x4StarNums <- products2017Num %>% group_by(x4StarReviews) %>% summarise (n = n())
PositiveNums <- products2017Num %>% group_by(PositiveServiceReview) %>% summarise (n = n())
products2017
View(products2017)
products2017 <- products2017[-c(36:41),]
View(products2017)
products2017Num <- products2017[c(-1,-2)]
# Visualize the data. First approach
for (col in 1:ncol(products2017Num)) {
hist(products2017Num[,col], main = names(products2017Num[col]), xlab=colnames(products2017Num[col]), border = "black", col = "#bcd4e6", breaks=50 )}
NegativeNums  <- products2017Num %>% group_by(NegativeServiceReview) %>% summarise (n = n())
View(NegativeNums)
#detect outliers for NegativeServiceReview
negativeServiceOutliers <- products2017 %>% filter(NegativeServiceReview == '112')
negativeServiceOutliers
View(negativeServiceOutliers)
View(products2017)
#remove outlier because is clearly more different in every attribute
products2017 <- products2017[-c(23),]
View(products2017)
products2017Num %>% group_by(NegativeServiceReview) %>% summarise (n = n())
# Visualize the data. First approach
for (col in 1:ncol(products2017Num)) {
hist(products2017Num[,col], main = names(products2017Num[col]), xlab=colnames(products2017Num[col]), border = "black", col = "#bcd4e6", breaks=50 )}
products2017Num <- products2017[c(-1,-2)]
hist(products2017$PositiveServiceReview)
Positive <- products2017 %>% group_by(PositiveServiceReview) %>% summarise (n = n())
products2017 %>% group_by(PositiveServiceReview) %>% summarise (n = n())
PositiveNums <- products2017 %>% group_by(PositiveServiceReview) %>% summarise (n = n())
NegativeNums  <- products2017 %>% group_by(NegativeServiceReview) %>% summarise (n = n())
products2017 %>% filter(PositiveServiceReview == '280')
pacman::p_load(ggplot2, dplyr, party)
products2017 <- read.csv("~/Documents/@/UBIQUM/DATAML/Week6/Profitability/Profitability/DATASETS/existingproductattributes2017.csv")
#Find patterns in the data
products2017_ctree <- ctree(Volume ~ ., data=products2017, controls = ctree_control(maxdepth = 4))
cresponses_ctree
products2017_ctree
plot(products2017_ctree)
#Remove Na
is.na(products2017)
#Remove Na
ncol(is.na(products2017))
na.omit(products2017)
products2017
nrows(products2017)
summary(products2017)
#Remove Na
ncol(is.na(products2017))
na.omit(products2017)
#Remove Na
ncol(is.na(products2017))
complete.cases(products2017)
str(products2017)
products2017 <-  products2017[complete.cases(products2017),]
str(products2017)
#Decision Tree
products2017_ctree <- ctree(Volume ~ ., data=products2017, controls = ctree_control(maxdepth = 4))
plot(products2017_ctree)
products2017Dummified <- dummyVars(" ~ .", data = products2017)
pacman::p_load(ggplot2, dplyr, party, caret)
products2017Dummified <- dummyVars(" ~ .", data = products2017)
#Select only numeric values
products2017Num <- products2017[c(-1,-2)]
str(products2017Num)
#Decision Tree
products2017_ctree <- ctree(Volume ~ ., data=products2017, controls = ctree_control(maxdepth = 4))
plot(products2017_ctree)
corrData <- cor(products2017)
corrData <- cor(products2017Num)
corrData
pacman::p_load(ggplot2, dplyr, party, caret, corrplot)
corrplot(corrData)
products2017$PositiveServiceReview
plot(corrData)
View(products2017)
#Combine variables
products2017Comb1 <- products2017[c(-1,-2, -4)]
products2017_ctree <- ctree(Volume ~ ., data=products2017Comb1, controls = ctree_control(maxdepth = 4))
plot(products2017_ctree)
#Decision Tree 1
products2017_ctree <- ctree(Volume ~ ., data=products2017, controls = ctree_control(maxdepth = 4))
plot(products2017_ctree)
#Combine variables A
products2017Comb1 <- products2017[c(-1,-2, -4)]
rm(products2017Comb1)
#Combine variables A
products2017CombA <- products2017[c(-1,-2, -4)]
#Decision Tree A
products2017_ctreeA <- ctree(Volume ~ ., data=products2017Comb1, controls = ctree_control(maxdepth = 4))
plot(products2017_ctreeA)
#Decision Tree A
products2017_ctreeA <- ctree(Volume ~ ., data=products2017CombA, controls = ctree_control(maxdepth = 4))
plot(products2017_ctreeA)
#Decision Tree A
products2017_ctreeA <- ctree(Volume ~ ., data=products2017CombA, controls = ctree_control(maxdepth = 7))
plot(products2017_ctreeA)
x4StarNums <- products2017 %>% group_by(x4StarReviews) %>% summarise (n = n())
x4StarNums
View(x4StarNums)
products2017 %>% group_by(x4StarReviews>100) %>% summarise (n = n())
x4StarNums <- products2017 %>% group_by(x4StarReviews =>100) %>% summarise (n = n())
products2017 %>% group_by(x4StarReviews >=100) %>% summarise (n = n())
products2017 %>% filter(PositiveServiceReview >= '100')
products2017 %>% filter(PositiveServiceReview > '100')
products2017 %>% filter(x4StarReviews > '100')
x4StarNums <- products2017 %>% group_by(x4StarReviews) %>% summarise (n = n())
products2017 %>% filter(x4StarReviews > 100)
View(products2017)
#Correlation Matrix
corrData <- cor(products2017)
corrplot(corrData)
products2017CombMerg <- products2017
View(products2017CombMerg)
products2017CombMerg$GoodReviews <- products2017$x5StarReviews + products2017$x4StarReviews
View(products2017CombMerg)
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
View(products2017CombMerg)
#detect outliers for 4StarReviews
x5StarNums <- products2017 %>% group_by(x5StarReviews) %>% summarise (n = n())
View(x5StarNums)
x5StarOutliers <- products2017 %>% filter(x5StarReviews > 1000)
View(x5StarOutliers)
View(x5StarNums)
products2017 %>% filter(x5StarReviews == 308
products2017 %>% filter(x5StarReviews == 308 )
products2017 %>% filter(x5StarReviews == '308' )
pacman::p_load(ggplot2, dplyr, party, caret, corrplot)
products2017 <- read.csv("~/Documents/@/UBIQUM/DATAML/Week6/Profitability/Profitability/DATASETS/existingproductattributes2017.csv")
#Remove Na
ncol(is.na(products2017))
is.na(products2017)
summary(is.na(products2017))
products2017$BestSellersRank <- NULL
summary(is.na(products2017))
#Combine variables A
products2017CombA <- products2017[c(-2, -4)]
#Decision Tree A
products2017_ctreeA <- ctree(Volume ~ ., data=products2017CombA, controls = ctree_control(maxdepth = 4))
plot(products2017_ctreeA)
products2017_ctreeA
#Decision Tree B
products2017_ctreeB <- ctree(Volume ~ ., data=products2017CombMerg, controls = ctree_control(maxdepth = 4))
products2017_ctreeA
View(products2017CombMerg)
products2017CombMerg <- products2017[c(-5:-8)]
products2017CombMerg
View(products2017CombMerg)
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
#Decision Tree B
products2017_ctreeB <- ctree(Volume ~ ., data=products2017CombMerg, controls = ctree_control(maxdepth = 4))
plot(products2017_ctreeB)
products2017CombMerg <- products2017[c(-4:-8)]
products2017CombMerg <- products2017
products2017CombMerg <- products2017[c(-4:-8)]
View(products2017CombMerg)
products2017CombMerg <- products2017[c(-4:-8)]
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
View(products2017CombMerg)
#Decision Tree B
products2017_ctreeB <- ctree(Volume ~ ., data=products2017CombMerg, controls = ctree_control(maxdepth = 4))
plot(products2017_ctreeB)
#Decision Tree B
products2017_ctreeB <- ctree(Volume ~ ., data=products2017CombMerg, controls = ctree_control(maxdepth = 10))
plot(products2017_ctreeB)
# Visualize the data. B
for (col in 1:ncol(products2017Num)) {
hist(products2017Num[,col], main = names(products2017Num[col]), xlab=colnames(products2017Num[col]), border = "black", col = "#bcd4e6", breaks=50 )}
products2017CombMerg <- products2017
products2017CombMerg <- products2017[c(-1,-2,-4:-8)]
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
plot(products2017_ctreeB)
products2017CombMerg <- products2017
products2017CombMerg <- products2017[c(-4:-8)]
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
#Decision Tree B
products2017_ctreeB <- ctree(Volume ~ ., data=products2017CombMerg, controls = ctree_control(maxdepth = 10))
plot(products2017_ctreeB)
View(products2017CombMerg)
#Correlation Matrix B
corrDataMerg <- cor(products2017CombMerg)
corrplot(corrDataMerg)
#Correlation Matrix B
corrDataMerg <- cor(products2017CombMerg)
View(products2017CombMerg)
#Select variables. B.2 Without 5StarReviews, Without Categorical Variables
products2017CombMerg <- products2017[c(-1, -2)]
products2017CombMerg
#Correlation Matrix B
corrDataMerg <- cor(products2017CombMerg)
corrplot(corrDataMerg)
products2017CombMerg <- products2017
products2017CombMerg <- products2017[c(-4:-8)]
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
corrplot(corrDataMerg)
products2017CombMerg <- products2017
products2017CombMerg <- products2017[c(-4:-8)]
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
#Select variables. B.2 Without 5StarReviews, Without Categorical Variables
products2017CombMerg <- products2017CombMerg[c(-1, -2)]
View(products2017CombMerg)
products2017CombMerg <- products2017
products2017CombMerg <- products2017[c(-4:-8)]
products2017CombMerg$GoodReviews <- products2017$x4StarReviews + products2017$x3StarReviews
products2017CombMerg$BadReviews <- products2017$x2StarReviews + products2017$x1StarReviews
#Decision Tree B
products2017_ctreeB <- ctree(Volume ~ ., data=products2017CombMerg, controls = ctree_control(maxdepth = 10))
plot(products2017_ctreeB)
#Select variables. B.2 Without 5StarReviews, Without Categorical Variables
products2017CombMerg2 <- products2017CombMerg[c(-1, -2)]
#Correlation Matrix B
corrDataMerg2 <- cor(products2017CombMerg2)
corrplot(corrDataMerg2)
# Visualize the data. B
for (col in 1:ncol(products2017CombMerg2)) {
hist(products2017CombMerg2[,col], main = names(products2017CombMerg2[col]), xlab=colnames(products2017CombMerg2[col]), border = "black", col = "#bcd4e6", breaks=20 )}
# Visualize the data. B
for (col in 1:ncol(products2017CombMerg2)) {
hist(products2017CombMerg2[,col], main = names(products2017CombMerg2[col]), xlab=colnames(products2017CombMerg2[col]), border = "black", col = "#bcd4e6", breaks=200 )}
plot(products2017_ctreeB)
#Decision Tree B
products2017_ctreeB <- ctree(Volume ~ ., data=products2017CombMerg, controls = ctree_control(maxdepth = 12))
plot(products2017_ctreeB)
GoodReviewsNums <- products2017CombMerg %>% group_by(GoodReviews) %>% summarise (n = n())
View(GoodReviewsNums)
GoodReviewsOutliers <- products2017CombMerg %>% filter(GoodReviews == '35')
View(GoodReviewsOutliers)
View(products2017CombMerg)
View(products2017CombMerg2)
products2017CombMergClean <- products2017CombMerg[-c(34:41),]
View(products2017CombMergClean)
#Decision Tree C
products2017_ctreeC <- ctree(Volume ~ ., data=products2017CombMergClean, controls = ctree_control(maxdepth = 10))
plot(products2017_ctreeC)
View(products2017CombMergClean)
#Select variables:: Feature Eng. C.2 Without Categorical Variables
products2017CombMergClean2 <- products2017CombMergClean[c(-1, -2)]
#Correlation Matrix C
corrDataMergClean2 <- cor(products2017CombMergClean2)
corrplot(corrDataMergClean2)
# Visualize the data. C
for (col in 1:ncol(products2017CombMerg2)) {
hist(products2017CombMerg2[,col], main = names(products2017CombMerg2[col]), xlab=colnames(products2017CombMerg2[col]), border = "black", col = "#bcd4e6", breaks=200 )}
#Creating dummy variables------
#Select variables:: Feature Eng. C.2 Without Categorical Variables
products2017CombMergClean2 <- products2017CombMergClean[c(-1, -2)]
# Visualize the data. C
for (col in 1:ncol(products2017CombMergClean2)) {
hist(products2017CombMergClean2[,col], main = names(products2017CombMergClean2[col]), xlab=colnames(products2017CombMergClean2[col]), border = "black", col = "#bcd4e6", breaks=200 )}
products2017CombMergClean
ggplot(products2017CombMergClean, aes(x=ProductType, fill=Volume)) + geom_bar()
products2017Clean <- products2017[-c(34:41),]
findOutlier <- function(products2017Clean, cutoff = 3) {
## Calculate the sd
sdproducts2017Clean <- apply(products2017Clean, 2, sd, na.rm = TRUE)
## Identify the cells with value greater than cutoff * sd (column wise)
result <- mapply(function(d, s) {
which(d > cutoff * s)
}, products2017Clean, sdproducts2017Clean)
result
}
outliers <- findOutlier(products2017Clean)
outliers
View(products2017Clean)
outliers <- findOutlier(products2017Clean)
outliers
plot(outliers)
outliers <- findOutlier(products2017Clean)
outliers
removeOutlier <- function(products2017Clean, outliers) {
result <- mapply(function(d, o) {
res <- d
res[o] <- NA
return(res)
}, products2017Clean, outliers)
return(as.data.frame(result))
}
products2017CleanFilter <- removeOutlier(products2017Clean, outliers)
View(products2017CleanFilter)
#RecommendProduct results had many outliers. Why?
plot(products2017$Recommendproduct)
hist(products2017$Recommendproduct)
RecommendNums <- products2017Clean %>% group_by(Recommendproduct) %>% summarise (n = n())
View(RecommendNums)
RecommendproductOutliers <- products2017Clean %>% filter(Recommendproduct > 0.6) #Product 150, 198
View(RecommendproductOutliers)
View(products2017Clean)
str(products2017Clean)
View(products2017Clean)
