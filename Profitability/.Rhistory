products17 <- read.csv("existingproductattributes2017.csv")
install.packages("pacman")
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
library(readr)
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
products2018 <- read.csv("DATASETS/existingproductattributesPast.csv")
for (col in 1:ncol(products2017)) {
hist(products2017[,col], main = names(products2017[col]), xlab=products2017(cresponses[col]), border = "black", col = "#bcd4e6
" )
knitr::opts_chunk$set(echo = TRUE)
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
detach("package:readr", unload = TRUE)
library(readr)
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
detach("package:readr", unload = TRUE)
library(readr)
library(rder)
library(readr)
library(ggplot2)
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
products <- read.csv("DATASETS/existingproductattributes2017.csv")
products2018 <- read.csv("DATASETS/existingProductAttributesPast")
products2018 <- read.csv("DATASETS/existingProductAttributesPast.csv")
products2017 <- read.csv("DATASETS/existingproductattributes2017.csv")
products2017Num <- products2017[select(c(-1,-2))]
pacman::p_load(ggplot2, dplyr)
products2017Num <- products2017[select(c(-1,-2))]
products2017Num <- products2017[(c(-1,-2)]
products2017Num <- products2017[c(-1,-2)]
products2017Num <- products2017[c(-1,-2)]
for (col in 1:ncol(products2017Num)) {
hist(products2017Num[,col], main = names(products2017Num[col]), xlab=colnames(products2017Num[col]), border = "black", col = "#bcd4e6
" )
products2017Num <- products2017[c(-1,-2)]
str(products2017Num)
summary(products2017Num)
products2017Num <- products2017[c(-1,-2)]
summary(products2017Num)
str(products2017Num)
names(products2017Num)[which(products2017Num==max(products2017Num))]
names(products2017Num$Price)[which(products2017Num$Price==max(products2017Num$Price))]
names(products2017Num$NegativeServiceReview)[which(products2017Num$NegativeServiceReview==max(products2017Num$NegativeServiceReview))]
names(products2017Num$NegativeServiceReview)[which(products2017Num$NegativeServiceReview==max(products2017Num$NegativeServiceReview))]
sort(products2017Num$NegativeServiceReview)
max(products2017Num$NegativeServiceReview
max(products2017Num$NegativeServiceReview)
max(products2017Num$NegativeServiceReview)
